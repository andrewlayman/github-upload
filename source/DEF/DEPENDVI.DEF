DEFINITION MODULE DependViews;              (* Subclass of ActiveViews *)

    (*  DependViews provides an object which is a view of a tree node.
        The data object of the tree node is a task name.  Its name is
        displayed using indentation to reflect depth in the tree, and "+"
        and "-" symbols to show whether or not it is a summary task.  The
        name is displayed in reverse video if the cursor is on it.
    *)

    (*  MODIFICATION HISTORY:

        28-Jul-89 EGK       Added "GetRecordedEvent" method.
        14-Dec-89 KKC       Patched ADependViewStatus to 16 bits.
    *)

FROM ActiveViews            IMPORT
    (* TYPE *)                  AnActiveView;

FROM Boxes                  IMPORT
    (* TYPE *)                  ABoxType;

FROM Events                 IMPORT
    (* TYPE *)                  AnEvent;

FROM Kbio                   IMPORT
    (* TYPE *)                  ascreenx, ascreeny, avidmode;

FROM Objects                IMPORT
    (* TYPE *)                  AnObjectMethods, AnObject;

FROM TreeObjects            IMPORT
    (* TYPE *)                  ATreeNode;



TYPE
        (*  ADependView is a subclass of AnActiveView  *)

    ADependView             = POINTER TO ADependViewRecord;

    ADependViewMethods      = POINTER TO ADependViewMethodsRecord;

    ADependViewRecord       = RECORD
                                Methods        : ADependViewMethods;
                              END;





TYPE

        (*  These types are re-definitions of types exported from ActiveViews. *)


    ADependViewStatus       = (RugTaken, OnScreen, NeedsRedisplay, 
                               ViewHidden, CursorOn,
                               DependViewSpare5, DependViewSpare6, 
                               DependViewSpare7, DependViewSpare8, 
                               DependViewSpare9);

    ADependViewStatusSet    = SET OF ADependViewStatus;











    (*  These are the methods for ADependView objects.  They inherit and
        redefine methods from ActiveViews, but do not add any new methods
        of their own.
    *)

TYPE
    ADependViewMethodsRecord  = RECORD

          Methods           : AnObjectMethods;

          Clone             : PROCEDURE(    ADependView,
                                        VAR ADependView )
                                                         : BOOLEAN;
          StoreOn           : PROCEDURE(    ADependView,
                                            AnObject    );

          Discard           : PROCEDURE(VAR ADependView );

          SuperclassMethods : AnObjectMethods;

          MethodSize        : CARDINAL;

          ObjectMethodsTag  : CARDINAL;


          GetExternalXY     : PROCEDURE(    ADependView,
                                        VAR ascreenx,
                                        VAR ascreeny,
                                        VAR ascreenx,
                                        VAR ascreeny    );

          GetInternalXY     : PROCEDURE(    ADependView,
                                        VAR ascreenx,
                                        VAR ascreeny,
                                        VAR ascreenx,
                                        VAR ascreeny    );

          GetTitle          : PROCEDURE(    ADependView,
                                        VAR ARRAY OF CHAR);

          SetObject         : PROCEDURE(    ADependView,
                                            ATreeNode   );

          GetObject         : PROCEDURE(    ADependView )
                                                         : ATreeNode;

          Move              : PROCEDURE(    ADependView,    
                                            ascreenx,        
                                            ascreeny    );

          Display           : PROCEDURE(    ADependView );

          GetHelp           : PROCEDURE(    ADependView );

          HideView          : PROCEDURE(    ADependView );

          RevealView        : PROCEDURE(    ADependView );

          NotifyOfChange    : PROCEDURE(    ADependView );

          ObjectViewTag     : CARDINAL;


          RecordEvent       : PROCEDURE(    ADependView,
                                            AnEvent     );

          GetRecordedEvent  : PROCEDURE(    ADependView,
                                            CARDINAL,
                                        VAR AnEvent   );

          ActOnEvent        : PROCEDURE(    ADependView,
                                            AnEvent,
                                        VAR AnEvent     );

          GetCursor         : PROCEDURE(    ADependView )   
                                                         : BOOLEAN;

          SetCursor         : PROCEDURE(    ADependView,   
                                            BOOLEAN     );

          SetCursorMode     : PROCEDURE(    ADependView,
                                            avidmode    );


          ActiveViewTag     : CARDINAL;


          DependViewTag     : CARDINAL;

                              END;








(*----------------------------------------------------------------------------
    InitAsDependView --

    Initialize the indicated object as a dependency view.

    Preconditions:
        None.

    Postconditions:
        The object will be a valid dependency view object.  No storage allocation
        is done by this procedure.
----------------------------------------------------------------------------*)

PROCEDURE InitAsDependView(    DependView   : ADependView;
                               SuperView    : AnActiveView;
                               Ulx          : ascreenx;
                               Uly          : ascreeny;
                               Lrx          : ascreenx;
                               Lry          : ascreeny;
                               Box          : ABoxType;
                               VideoMode    : avidmode;
                               HelpKey      : CARDINAL);








(*----------------------------------------------------------------------------
    CreateDependView --

    Allocate storage for, and initialize the indicated object as a dependency 
    view.

    Preconditions:
        None.

    Postconditions:
        Iff there is sufficient heap space available, the object will be 
        allocated and initialized as a valid dependency view object, and TRUE
        will be returned.  
----------------------------------------------------------------------------*)

PROCEDURE CreateDependView( VAR DependView   : ADependView;
                                SuperView    : AnActiveView;
                                Ulx          : ascreenx;
                                Uly          : ascreeny;
                                Lrx          : ascreenx;
                                Lry          : ascreeny;
                                Box          : ABoxType;
                                VideoMode    : avidmode;
                                HelpKey      : CARDINAL)
                                                        : BOOLEAN;








(*----------------------------------------------------------------------------
    UnInitAsDependView --

    UnInitialize the indicated object as a dependency view.

    Preconditions:
        The object will be a valid dependency view object.

    Postconditions:
        The dependency view will no longer be a valid dependency view object, and any
        side-effects of InitAsDependView will be undone.  This procedure does
        not deallocate storage.
----------------------------------------------------------------------------*)

PROCEDURE UnInitAsDependView(    DependView : ADependView);







(*----------------------------------------------------------------------------
    CloneDependViewMethods --

    Make a copy of the dependency view methods into the indicated method object.

    Preconditions:
        None.

    Postcondition:
        The dependency view methods will be copied into the indicated method 
        object.
----------------------------------------------------------------------------*)

PROCEDURE CloneDependViewMethods(    MethodObject : ADependViewMethods);









(*----------------------------------------------------------------------------
    ValidateDependView --

    Determine that the indicated object is in fact a valid dependency view object.

    Preconditions:
        None.

    Postconditions:
        If the object is not a valid dependency view object, FatalError will be
        called.
----------------------------------------------------------------------------*)

PROCEDURE ValidateDependView(    DependView : ADependView);



END DependViews.
