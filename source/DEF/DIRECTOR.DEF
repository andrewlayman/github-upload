    (*V1=OS2 OS2 code changes.	  *)
    (*V2=DOS Regular DOS TL code. *)
DEFINITION MODULE Directory;


  (* ModificationHistory:

        June 23, 1987 by RSC - Added FileNameNode and Record.  Added
                               Procs "StartFileNodeLookup" and
                               "ContinueFileNodeLookup".
        21-May-89 KKC   Add new function ParseFileName
        04-Aug-89 WKH   Initial OS/2 support for Time Line V4.
  *)


FROM BigTimeU IMPORT ABigTime;



    (*  Directory assistance for DOS  *)


CONST
    MaximumDeviceNameLength = 4;
    MaximumPathNameLength   = 64;
    MaximumFileNameLength   = 8;
    MaximumExtensionLength  = 3;

TYPE
    AFileNamePart = (DevicePart,DirectoryPart,FileNamePart,ExtensionPart);
    ASetOfFileNameParts = SET OF AFileNamePart;
    AFileAttribute          = (ReadOnlyAttribute, HiddenAttribute,
                               SystemAttribute, LabelAttribute,
                               SubdirectoryAttribute, ArchiveAttribute,
                               DiskDriveAttribute,
                               Dummy1,
                               Dummy2,
                               Dummy3  (* Make into 16 bits *)  );
    AFileAttributeSet       = SET OF AFileAttribute;


    AFileNameNode   = POINTER TO AFileNameRecord;
    AFileNameRecord =
        RECORD
                Device          : ARRAY [0..MaximumDeviceNameLength] OF CHAR;
                Path            : ARRAY [0..MaximumPathNameLength]   OF CHAR;
                FileName        : ARRAY [0..MaximumFileNameLength]   OF CHAR;
                Extension       : ARRAY [0..MaximumExtensionLength]  OF CHAR;
                TimeStamp       : ABigTime;
                Size            : CARDINAL; (* In KB *)
                Attributes      : AFileAttributeSet;
        END;






    (*  FileLookupStart  --  Finds the name of a project on the
                             indicated disk.   Filename on input is
                             the desired file name or mask (with
                             wildcards).  On output, Filename will
                             contain the name and the date of last
                             update.  *)


PROCEDURE FileLookupStart(VAR FileNameMask: ARRAY OF CHAR;
                          VAR Filename:ARRAY OF CHAR;
                          VAR Attribute : AFileAttributeSet):BOOLEAN;



PROCEDURE FileLookupContinue(VAR Filename:ARRAY OF CHAR;
                             VAR Attribute : AFileAttributeSet):BOOLEAN;



 (* StartFileNode Lookup - Start a directory search to return FileNameRecords.

        Preconditions  - FileNameMask is the desired file name including
                         wildcards.

        Postconditions - FileNameRecord is the returned, structured, data.
                         RETURN is TRUE iff Ok.
 *)

PROCEDURE StartFileNodeLookup( VAR FileNameMask   : ARRAY OF CHAR;
                               VAR FileNameRecord : AFileNameRecord ): BOOLEAN;


 (* ContinueFileNode Lookup - Continue a file search started by
                              StartFileNodeLookup.

        Preconditions  - StartFileNodeLookup was called and returned TRUE.

        Postconditions - FileNameRecord is the returned, structured, data.
                         RETURN is TRUE iff Ok.
 *)

PROCEDURE ContinueFileNodeLookup(
                               VAR FileNameRecord : AFileNameRecord ): BOOLEAN;






    (*  DOSVersion -- Returns the version of DOS currently executing.
                      The HIGH ORDER byte has the major version, and the
                      low order byte the minor version (reversed from the
                      PC-DOS returned order.)
                  *)


PROCEDURE DOSVersion():CARDINAL;


    (*  ExtractDeviceName -- Extract the Device Name within a file or path
                             name.  Return the current drive letter if no device
                             name is found.
                             "i" is set to the index of the next char past the
                             device name. *)



PROCEDURE ExtractDeviceName(VAR From, DeviceName : ARRAY OF CHAR; VAR i:CARDINAL);


    (*
            This function is very similiar to ExtractFileNameParts except
            it returns NULL for DeviceName and PathName if s just contains
            a file name.
     *)


PROCEDURE ParseFileName(
                                        s : ARRAY OF CHAR;
                          VAR DeviceName,
                                PathName,
                                FileName,
                                Extension : ARRAY OF CHAR
                       );

    (*  Parse the string "s" looking for the parts of a file name.
            The DeviceName will be returned with a ":".
            The FileName and Extension will have no separating ".".
            The PathName, if it exists, will have its trailing "\".
     *)


PROCEDURE ExtractFileNameParts(
                                                  s : ARRAY OF CHAR;
                                  VAR DeviceName,
                                          PathName,
                                          FileName,
                                          Extension : ARRAY OF CHAR
                              );



    (*  NormalizeFileName  -- rephrase a file name, correcting for common
                              errors.  The FileNameParts is a list of the
                              parts that we want included in the return. *)

PROCEDURE NormalizeFileName(VAR s:ARRAY OF CHAR; FileNameParts:ASetOfFileNameParts);


    (*  PathLookupStart -- Search all of the directories in Path for
                           a file matching the mask.  If one is found,
                           return the Directory and the filename.
                           Unlike the FileLookup procedures, this one
                           does not return the file's time.
                           Returns FALSE if no matches found.
                           *)

PROCEDURE PathLookupStart(VAR Path,
                              FileNameMask: ARRAY OF CHAR;
                          VAR Directory,
                              Filename:ARRAY OF CHAR):BOOLEAN;

    (*  DirectoryIsReachable -- Check that the named directory exists and
                           is reachable. *)

PROCEDURE DirectoryIsReachable(VAR Directory:ARRAY OF CHAR):BOOLEAN;

    (*  NumberOfDiskettes -- how many actual diskettes are on the system?  *)

PROCEDURE NumberOfDiskettes(): CARDINAL;


    (*  RemovableMedia -- Returns TRUE iff the disk or device is
                          a removable volume.  *)

PROCEDURE RemovableMedia(     Media : ARRAY OF CHAR ) : BOOLEAN;


    (*  GetPathEntry -- Get the nth (starting with 0) substring from
                        PathList where each substring is delimited by
                        semicolons. *)

PROCEDURE GetPathEntry(VAR PathList:ARRAY OF CHAR; n:CARDINAL;
                       VAR PathEntry:ARRAY OF CHAR ) : BOOLEAN;

    (* DiskFreeSpace -- For the named media, return the facts necessary
                        to compute free and total disk space. *)

(*<DOS*)
PROCEDURE DiskFreeSpace(     Media             : ARRAY OF CHAR;
                         VAR FreeClusters,
                             TotalClusters,
                             BytesPerSector,
                             SectorsPerCluster : CARDINAL;
                         VAR Valid             : BOOLEAN );
(*DOS>*)

(*<OS2
PROCEDURE DiskFreeSpace(     Media	           : ARRAY OF CHAR;
			             VAR FreeClusters,
			                 TotalClusters,
			                 SectorsPerCluster : LONGINT;
			             VAR BytesPerSector    : CARDINAL;
	   		             VAR Valid	           : BOOLEAN );
OS2>*)




  (* Expand Path - Expand a path name.  This includes expanding ".\" and
                   "..\" properly, and filling in a default device and path
                   spec.

       Preconditions  - PathIn      is a device and path string that may
                                    contain dots in the path section.
                        DefaultPath is a default device and path to apply
                                    if the device and path are missing.
                                    If this too is nul (length=0), the default
                                    is the default disc and directory.  This is
                                    provided for command line interpretation.
       Postconditions - PathOut     is the expanded path.  If the expanded
                                    path will not fit in 64 bytes (the limit),
                                    The source path will be returned.
  *)
PROCEDURE ExpandPath( VAR PathIn,
                          DefaultPath,
                          PathOut     : ARRAY OF CHAR );




END Directory.
