DEFINITION MODULE MemoViews;              (* Subclass of ActiveViews *)

    (*  MemoViews provides an object which is a view of a tree node.
        The data object of the tree node is a memo name.  The memo name is
        displayed using indentation to reflect depth in the tree, and "+"
        and "-" symbols to show whether or not it has children.  The memo
        name is displayed in reverse video if the cursor is on it.
    *)

    (*  MODIFICATION HISTORY:

        28-Jul-89 EGK       Added "GetRecordedEvent" method.
        14-Dec-89 KKC       Patched AMemoViewStatus to 16 bits.
    *)

FROM ActiveViews            IMPORT
    (* TYPE *)                  AnActiveView;

FROM Boxes                  IMPORT
    (* TYPE *)                  ABoxType;

FROM Events                 IMPORT
    (* TYPE *)                  AnEvent;

FROM Kbio                   IMPORT
    (* TYPE *)                  ascreenx, ascreeny, avidmode;

FROM Objects                IMPORT
    (* TYPE *)                  AnObjectMethods, AnObject;

FROM TreeObjects            IMPORT
    (* TYPE *)                  ATreeNode;



TYPE
        (*  AMemoView is a subclass of AnActiveView  *)

    AMemoView               = POINTER TO AMemoViewRecord;

    AMemoViewMethods        = POINTER TO AMemoViewMethodsRecord;

    AMemoViewRecord         = RECORD
                                Methods        : AMemoViewMethods;
                              END;





TYPE

        (*  These types are re-definitions of types exported from ActiveViews. *)


    AMemoViewStatus         = (RugTaken, OnScreen, NeedsRedisplay, ViewHidden,
                               CursorOn,
                               MemoViewSpare5, MemoViewSpare6, 
                               MemoViewSpare7, MemoViewSpare8, 
                               MemoViewSpare9);

    AMemoViewStatusSet      = SET OF AMemoViewStatus;










    (*  These are the methods for AMemoView objects.  They inherit and
        redefine methods from ActiveViews, but do not add any new methods
        of their own.
    *)

TYPE
    AMemoViewMethodsRecord  = RECORD

          Methods           : AnObjectMethods;

          Clone             : PROCEDURE(    AMemoView,
                                        VAR AMemoView )
                                                       : BOOLEAN;
          StoreOn           : PROCEDURE(    AMemoView,
                                            AnObject  );

          Discard           : PROCEDURE(VAR AMemoView );

          SuperclassMethods : AnObjectMethods;

          MethodSize        : CARDINAL;

          ObjectMethodsTag  : CARDINAL;


          GetExternalXY     : PROCEDURE(    AMemoView,
                                        VAR ascreenx,
                                        VAR ascreeny,
                                        VAR ascreenx,
                                        VAR ascreeny  );

          GetInternalXY     : PROCEDURE(    AMemoView,
                                        VAR ascreenx,
                                        VAR ascreeny,
                                        VAR ascreenx,
                                        VAR ascreeny  );

          (*------------------------------------------------------------------
            GetTitle --

                In this module, GetTitle returns the name of the viewed
                filter, NOT the title of this view's box, which may or may
                not be displaying.

            Preconditions:
                The view must be a valid Memo view object.

            Postconditions:
                If the view object of this view is not NIL, the filter name
                associated with this view will be returned.  Otherwise, a
                zero-length string will be returned.
          ------------------------------------------------------------------*)

          GetTitle          : PROCEDURE(    AMemoView,
                                        VAR ARRAY OF CHAR);

          SetObject         : PROCEDURE(    AMemoView,
                                            ATreeNode );

          GetObject         : PROCEDURE(    AMemoView )
                                                       : ATreeNode;

          Move              : PROCEDURE(    AMemoView,    
                                            ascreenx,        
                                            ascreeny  );

          Display           : PROCEDURE(    AMemoView );

          GetHelp           : PROCEDURE(    AMemoView );

          HideView          : PROCEDURE(    AMemoView );

          RevealView        : PROCEDURE(    AMemoView );

          NotifyOfChange    : PROCEDURE(    AMemoView );

          ObjectViewTag     : CARDINAL;


          RecordEvent       : PROCEDURE(    AMemoView,
                                            AnEvent   );

          GetRecordedEvent  : PROCEDURE(    AMemoView,
                                            CARDINAL,
                                        VAR AnEvent   );

          ActOnEvent        : PROCEDURE(    AMemoView,
                                            AnEvent,
                                        VAR AnEvent   );

          GetCursor         : PROCEDURE(    AMemoView )   
                                                       : BOOLEAN;

          SetCursor         : PROCEDURE(    AMemoView,   
                                            BOOLEAN   );

          SetCursorMode     : PROCEDURE(    AMemoView,
                                            avidmode  );


          ActiveViewTag     : CARDINAL;


          MemoViewTag       : CARDINAL;

                              END;








(*----------------------------------------------------------------------------
    InitAsMemoView --

    Initialize the indicated object as a memo view.

    Preconditions:
        None.

    Postconditions:
        The object will be a valid memo view object.  No storage allocation
        is done by this procedure.
----------------------------------------------------------------------------*)

PROCEDURE InitAsMemoView(      MemoView     : AMemoView;
                               SuperView    : AnActiveView;
                               Ulx          : ascreenx;
                               Uly          : ascreeny;
                               Lrx          : ascreenx;
                               Lry          : ascreeny;
                               Box          : ABoxType;
                               VideoMode    : avidmode;
                               HelpKey      : CARDINAL);








(*----------------------------------------------------------------------------
    CreateMemoView --

    Allocate storage for, and initialize the indicated object as a memo 
    view.

    Preconditions:
        None.

    Postconditions:
        Iff there is sufficient heap space available, the object will be 
        allocated and initialized as a valid memo view object, and TRUE
        will be returned.  
----------------------------------------------------------------------------*)

PROCEDURE CreateMemoView(  VAR MemoView     : AMemoView;
                               SuperView    : AnActiveView;
                               Ulx          : ascreenx;
                               Uly          : ascreeny;
                               Lrx          : ascreenx;
                               Lry          : ascreeny;
                               Box          : ABoxType;
                               VideoMode    : avidmode;
                               HelpKey      : CARDINAL)
                                                       : BOOLEAN;








(*----------------------------------------------------------------------------
    UnInitAsMemoView --

    UnInitialize the indicated object as a memo view.

    Preconditions:
        The object will be a valid memo view object.

    Postconditions:
        The memo view will no longer be a valid memo view object, and any
        side-effects of InitAsMemoView will be undone.  This procedure does
        not deallocate storage.
----------------------------------------------------------------------------*)

PROCEDURE UnInitAsMemoView(    MemoView : AMemoView);







(*----------------------------------------------------------------------------
    CloneMemoViewMethods --

    Make a copy of the memo view methods into the indicated method object.

    Preconditions:
        None.

    Postcondition:
        The memo view methods will be copied into the indicated method 
        object.
----------------------------------------------------------------------------*)

PROCEDURE CloneMemoViewMethods(    MethodObject : AMemoViewMethods);









(*----------------------------------------------------------------------------
    ValidateMemoView --

    Determine that the indicated object is in fact a valid memo view object.

    Preconditions:
        None.

    Postconditions:
        If the object is not a valid memo view object, FatalError will be
        called.
----------------------------------------------------------------------------*)

PROCEDURE ValidateMemoView(    MemoView : AMemoView);



END MemoViews.
