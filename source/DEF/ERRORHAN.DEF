DEFINITION MODULE ErrorHandler;

    (*  This module is intended to facilitate the handling of errors.  It's
        intended that a procedure get a new marker whenever it needs to be
        able to detect, report, and/or correct errors which might occur in
        its processing, or the processing of any procedures it calls.  A
        procedure which gets a new marker is responsible for calling 
        PopToMarker to release stack space before it exits.  Procedures
        which do not handle errors need not bother with this module, as any
        errors not handled will remain on the stack for the use of their
        callers.

        To report an error upward, after detecting ones generated by called
        procedures, a procedure first releases its marker and then post the
        error.
    *)



TYPE
    AnErrorMarker           = CARDINAL;



(*----------------------------------------------------------------------------
    NewMarker --

    Create a new, unique marker by which to identify the position in the
    error stack at which errors to be handled by the caller will begin.

    Preconditions:
        None.

    Postconditions:
        A unique marker will be returned.
----------------------------------------------------------------------------*)

PROCEDURE NewMarker(): AnErrorMarker;






(*----------------------------------------------------------------------------
    PopToMarker --

    Pop all errors from the error stack, down to and including the given
    error marker.  Any such errors will be lost.

    Preconditions:
        The marker passed must have been created by the NewMarker
        procedure, and not previously used in a call to this procedure.

    Postconditions:
        Any errors posted on top of the indicated marker will be removed
        from the error stack, along with the marker.  The passed marker will
        be set to zero, to prevent it from being reused.
----------------------------------------------------------------------------*)

PROCEDURE PopToMarker(VAR Marker            : AnErrorMarker);





(*----------------------------------------------------------------------------
    PostError --

    Push an error onto the top of the error stack, giving the error code and
    category.

    Preconditions:
        There must be at least one error marker remaining on the stack.

    Postconditions:
        The error code and category will be pushed onto the stack, on top of
        whatever markers exist there.
----------------------------------------------------------------------------*)

PROCEDURE PostError(    ErrorCategory       : CARDINAL;
                        ErrorCode           : CARDINAL);





(*----------------------------------------------------------------------------
    ErrorPosted --

    Determine if an error has been posted on top of the indicated marker.

    Preconditions:
        The marker passed must have been created by the NewMarker
        procedure, and not previously used in a call to PopToMarker.

    Postconditions:
        TRUE will be returned iff there is an error posted on top of the
        indicated marker.
----------------------------------------------------------------------------*)

PROCEDURE ErrorPosted(    Marker            : AnErrorMarker)
                                                            : BOOLEAN;





(*----------------------------------------------------------------------------
    GetErrorDetails --

    Retrieve the error category and code for the error at the offset relative
    to the given marker.  An offset of zero retrieves the first error posted
    on top of the given marker, 1 retrieves the second, etc.  Any intervening
    markers are ignored for the purposes of this procedure.

    Preconditions:
        The marker passed must have been created by the NewMarker
        procedure, and not previously used in a call to PopToMarker.

    Postconditions:
        If there is an error at the offset given, relative to the marker, 
        then that error's category and code will be returned.  If there is
        no error corrosponding to that offset for the marker, both the
        category and code will be returned as zero.
----------------------------------------------------------------------------*)

PROCEDURE GetErrorDetails(    Marker        : AnErrorMarker;
                              Offset        : CARDINAL;
                          VAR ErrorCategory : CARDINAL;
                          VAR ErrorCode     : CARDINAL     );






(*----------------------------------------------------------------------------
    UnPostError --

    Remove the error at the offset relative to the given marker.  After
    removal, it will be as if that error had never been posted.

    Preconditions:
        The marker passed must have been created by the NewMarker
        procedure, and not previously used in a call to PopToMarker.
        The offset must refer to an existing error on the error stack.

    Postconditions:
        The indicated error will be removed.  This does not affect any
        markers on the error stack, even if this was the last error for
        one of them.
----------------------------------------------------------------------------*)

PROCEDURE UnPostError(    Marker            : AnErrorMarker;
                          Offset            : CARDINAL     );


END ErrorHandler.
