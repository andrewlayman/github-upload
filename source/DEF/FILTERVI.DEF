DEFINITION MODULE FilterViews;              (* Subclass of ActiveViews *)

    (*  FilterViews provides an object which is a view of a tree node.
        The data object of the tree node is a filter.  Its name is
        displayed using indentation to reflect depth in the tree, and "+"
        and "-" symbols to show whether or not it has children.  The filter
        name is displayed in reverse video if the cursor is on it.
    *)

    (*  MODIFICATION HISTORY:

        28-Jul-89 EGK       Added "GetRecordedEvent" method.
        14-Dec-89 KKC       Patched AFilterViewStatus to 16 bits.
    *)

FROM ActiveViews            IMPORT
    (* TYPE *)                  AnActiveView;

FROM Boxes                  IMPORT
    (* TYPE *)                  ABoxType;

FROM Events                 IMPORT
    (* TYPE *)                  AnEvent;

FROM Kbio                   IMPORT
    (* TYPE *)                  ascreenx, ascreeny, avidmode;

FROM Objects                IMPORT
    (* TYPE *)                  AnObjectMethods, AnObject;

FROM TreeObjects            IMPORT
    (* TYPE *)                  ATreeNode;



TYPE
        (*  AFilterView is a subclass of AnActiveView  *)

    AFilterView             = POINTER TO AFilterViewRecord;

    AFilterViewMethods      = POINTER TO AFilterViewMethodsRecord;

    AFilterViewRecord       = RECORD
                                Methods        : AFilterViewMethods;
                              END;





TYPE

        (*  These types are re-definitions of types exported from ActiveViews. *)


    AFilterViewStatus       = (RugTaken, OnScreen, NeedsRedisplay, ViewHidden,
                               CursorOn,
                               FilterViewSpare5, FilterViewSpare6, 
                               FilterViewSpare7, FilterViewSpare8, 
                               FilterViewSpare9);

    AFilterViewStatusSet    = SET OF AFilterViewStatus;











    (*  These are the methods for AFilterView objects.  They inherit and
        redefine methods from ActiveViews, but do not add any new methods
        of their own.
    *)

TYPE
    AFilterViewMethodsRecord  = RECORD

          Methods           : AnObjectMethods;

          Clone             : PROCEDURE(    AFilterView,
                                        VAR AFilterView )
                                                         : BOOLEAN;
          StoreOn           : PROCEDURE(    AFilterView,
                                            AnObject    );

          Discard           : PROCEDURE(VAR AFilterView );

          SuperclassMethods : AnObjectMethods;

          MethodSize        : CARDINAL;

          ObjectMethodsTag  : CARDINAL;


          GetExternalXY     : PROCEDURE(    AFilterView,
                                        VAR ascreenx,
                                        VAR ascreeny,
                                        VAR ascreenx,
                                        VAR ascreeny    );

          GetInternalXY     : PROCEDURE(    AFilterView,
                                        VAR ascreenx,
                                        VAR ascreeny,
                                        VAR ascreenx,
                                        VAR ascreeny    );

          (*------------------------------------------------------------------
            GetTitle --

                In this module, GetTitle returns the name of the viewed
                filter, NOT the title of this view's box, which may or may
                not be displaying.

            Preconditions:
                The view must be a valid Filter view object.

            Postconditions:
                If the view object of this view is not NIL, the filter name
                associated with this view will be returned.  Otherwise, a
                zero-length string will be returned.
          ------------------------------------------------------------------*)

          GetTitle          : PROCEDURE(    AFilterView,
                                        VAR ARRAY OF CHAR);

          SetObject         : PROCEDURE(    AFilterView,
                                            ATreeNode   );

          GetObject         : PROCEDURE(    AFilterView )
                                                         : ATreeNode;

          Move              : PROCEDURE(    AFilterView,    
                                            ascreenx,        
                                            ascreeny    );

          Display           : PROCEDURE(    AFilterView );

          GetHelp           : PROCEDURE(    AFilterView );

          HideView          : PROCEDURE(    AFilterView );

          RevealView        : PROCEDURE(    AFilterView );

          NotifyOfChange    : PROCEDURE(    AFilterView );

          ObjectViewTag     : CARDINAL;


          RecordEvent       : PROCEDURE(    AFilterView,
                                            AnEvent     );

          GetRecordedEvent  : PROCEDURE(    AFilterView,
                                            CARDINAL,
                                        VAR AnEvent   );

          ActOnEvent        : PROCEDURE(    AFilterView,
                                            AnEvent,
                                        VAR AnEvent     );

          GetCursor         : PROCEDURE(    AFilterView )   
                                                         : BOOLEAN;

          SetCursor         : PROCEDURE(    AFilterView,   
                                            BOOLEAN     );

          SetCursorMode     : PROCEDURE(    AFilterView,
                                            avidmode    );


          ActiveViewTag     : CARDINAL;


          FilterViewTag     : CARDINAL;

                              END;








(*----------------------------------------------------------------------------
    InitAsFilterView --

    Initialize the indicated object as a filter view.

    Preconditions:
        None.

    Postconditions:
        The object will be a valid filter view object.  No storage allocation
        is done by this procedure.
----------------------------------------------------------------------------*)

PROCEDURE InitAsFilterView(    FilterView   : AFilterView;
                               SuperView    : AnActiveView;
                               Ulx          : ascreenx;
                               Uly          : ascreeny;
                               Lrx          : ascreenx;
                               Lry          : ascreeny;
                               Box          : ABoxType;
                               VideoMode    : avidmode;
                               HelpKey      : CARDINAL);








(*----------------------------------------------------------------------------
    CreateFilterView --

    Allocate storage for, and initialize the indicated object as a filter 
    view.

    Preconditions:
        None.

    Postconditions:
        Iff there is sufficient heap space available, the object will be 
        allocated and initialized as a valid filter view object, and TRUE
        will be returned.  
----------------------------------------------------------------------------*)

PROCEDURE CreateFilterView( VAR FilterView   : AFilterView;
                                SuperView    : AnActiveView;
                                Ulx          : ascreenx;
                                Uly          : ascreeny;
                                Lrx          : ascreenx;
                                Lry          : ascreeny;
                                Box          : ABoxType;
                                VideoMode    : avidmode;
                                HelpKey      : CARDINAL)
                                                        : BOOLEAN;








(*----------------------------------------------------------------------------
    UnInitAsFilterView --

    UnInitialize the indicated object as a filter view.

    Preconditions:
        The object will be a valid filter view object.

    Postconditions:
        The filter view will no longer be a valid filter view object, and any
        side-effects of InitAsFilterView will be undone.  This procedure does
        not deallocate storage.
----------------------------------------------------------------------------*)

PROCEDURE UnInitAsFilterView(    FilterView : AFilterView);







(*----------------------------------------------------------------------------
    CloneFilterViewMethods --

    Make a copy of the filter view methods into the indicated method object.

    Preconditions:
        None.

    Postcondition:
        The filter view methods will be copied into the indicated method 
        object.
----------------------------------------------------------------------------*)

PROCEDURE CloneFilterViewMethods(    MethodObject : AFilterViewMethods);









(*----------------------------------------------------------------------------
    ValidateFilterView --

    Determine that the indicated object is in fact a valid filter view object.

    Preconditions:
        None.

    Postconditions:
        If the object is not a valid filter view object, FatalError will be
        called.
----------------------------------------------------------------------------*)

PROCEDURE ValidateFilterView(    FilterView : AFilterView);



END FilterViews.
