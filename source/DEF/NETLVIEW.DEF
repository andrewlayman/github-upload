DEFINITION MODULE NetLViews;              (* Subclass of ActiveViews *)

    (*  NetLViews provides an object which is a view of a tree node.
        The data object of the tree node is a layout.  Its name is
        displayed using indentation to reflect depth in the tree, and "+"
        and "-" symbols to show whether or not it has children.  The layout
        name is displayed in reverse video if the cursor is on it.
    *)

    (*  MODIFICATION HISTORY:

        28-Jul-89 EGK       Added "GetRecordedEvent" method.
        14-Dec-89 KKC       Patched ANetLViewStatus to 16 bits.
    *)

FROM ActiveViews            IMPORT
    (* TYPE *)                  AnActiveView;

FROM Boxes                  IMPORT
    (* TYPE *)                  ABoxType;

FROM Events                 IMPORT
    (* TYPE *)                  AnEvent;

FROM Kbio                   IMPORT
    (* TYPE *)                  ascreenx, ascreeny, avidmode;

FROM Objects                IMPORT
    (* TYPE *)                  AnObjectMethods, AnObject;

FROM TreeObjects            IMPORT
    (* TYPE *)                  ATreeNode;



TYPE
        (*  ANetLView is a subclass of AnActiveView  *)

    ANetLView               = POINTER TO ANetLViewRecord;

    ANetLViewMethods        = POINTER TO ANetLViewMethodsRecord;

    ANetLViewRecord         = RECORD
                                Methods        : ANetLViewMethods;
                              END;





TYPE

        (*  These types are re-definitions of types exported from ActiveViews. *)


    ANetLViewStatus         = (RugTaken, OnScreen, NeedsRedisplay, ViewHidden,
                               CursorOn,
                               NetLViewSpare5, NetLViewSpare6, 
                               NetLViewSpare7, NetLViewSpare8, 
                               NetLViewSpare9);

    ANetLViewStatusSet      = SET OF ANetLViewStatus;











    (*  These are the methods for ANetLView objects.  They inherit and
        redefine methods from ActiveViews, but do not add any new methods
        of their own.
    *)

TYPE
    ANetLViewMethodsRecord    = RECORD

          Methods           : AnObjectMethods;

          Clone             : PROCEDURE(    ANetLView,
                                        VAR ANetLView )
                                                       : BOOLEAN;
          StoreOn           : PROCEDURE(    ANetLView,
                                            AnObject  );

          Discard           : PROCEDURE(VAR ANetLView );

          SuperclassMethods : AnObjectMethods;

          MethodSize        : CARDINAL;

          ObjectMethodsTag  : CARDINAL;


          GetExternalXY     : PROCEDURE(    ANetLView,
                                        VAR ascreenx,
                                        VAR ascreeny,
                                        VAR ascreenx,
                                        VAR ascreeny  );

          GetInternalXY     : PROCEDURE(    ANetLView,
                                        VAR ascreenx,
                                        VAR ascreeny,
                                        VAR ascreenx,
                                        VAR ascreeny  );

          (*------------------------------------------------------------------
            GetTitle --

                In this module, GetTitle returns the name of the viewed
                layout, NOT the title of this view's box, which may or may
                not be displaying.

            Preconditions:
                The view must be a valid NetL view object.

            Postconditions:
                If the view object of this view is not NIL, the layout name
                associated with this view will be returned.  Otherwise, a
                zero-length string will be returned.
          ------------------------------------------------------------------*)

          GetTitle          : PROCEDURE(    ANetLView,
                                        VAR ARRAY OF CHAR);

          SetObject         : PROCEDURE(    ANetLView,
                                            ATreeNode );

          GetObject         : PROCEDURE(    ANetLView )
                                                       : ATreeNode;

          Move              : PROCEDURE(    ANetLView,    
                                            ascreenx,        
                                            ascreeny  );

          Display           : PROCEDURE(    ANetLView );

          GetHelp           : PROCEDURE(    ANetLView );

          HideView          : PROCEDURE(    ANetLView );

          RevealView        : PROCEDURE(    ANetLView );

          NotifyOfChange    : PROCEDURE(    ANetLView );

          ObjectViewTag     : CARDINAL;


          RecordEvent       : PROCEDURE(    ANetLView,
                                            AnEvent   );

          GetRecordedEvent  : PROCEDURE(    ANetLView,
                                            CARDINAL,
                                        VAR AnEvent   );

          ActOnEvent        : PROCEDURE(    ANetLView,
                                            AnEvent,
                                        VAR AnEvent   );

          GetCursor         : PROCEDURE(    ANetLView )   
                                                       : BOOLEAN;

          SetCursor         : PROCEDURE(    ANetLView,   
                                            BOOLEAN   );

          SetCursorMode     : PROCEDURE(    ANetLView,
                                            avidmode  );


          ActiveViewTag     : CARDINAL;


          NetLViewTag       : CARDINAL;

                              END;








(*----------------------------------------------------------------------------
    InitAsNetLView --

    Initialize the indicated object as a layout view.

    Preconditions:
        None.

    Postconditions:
        The object will be a valid layout view object.  No storage allocation
        is done by this procedure.
----------------------------------------------------------------------------*)

PROCEDURE InitAsNetLView(    NetLView     : ANetLView;
                             SuperView    : AnActiveView;
                             Ulx          : ascreenx;
                             Uly          : ascreeny;
                             Lrx          : ascreenx;
                             Lry          : ascreeny;
                             Box          : ABoxType;
                             VideoMode    : avidmode;
                             HelpKey      : CARDINAL);








(*----------------------------------------------------------------------------
    CreateNetLView --

    Allocate storage for, and initialize the indicated object as a layout 
    view.

    Preconditions:
        None.

    Postconditions:
        Iff there is sufficient heap space available, the object will be 
        allocated and initialized as a valid layout view object, and TRUE
        will be returned.  
----------------------------------------------------------------------------*)

PROCEDURE CreateNetLView( VAR NetLView     : ANetLView;
                              SuperView    : AnActiveView;
                              Ulx          : ascreenx;
                              Uly          : ascreeny;
                              Lrx          : ascreenx;
                              Lry          : ascreeny;
                              Box          : ABoxType;
                              VideoMode    : avidmode;
                              HelpKey      : CARDINAL)
                                                      : BOOLEAN;








(*----------------------------------------------------------------------------
    UnInitAsNetLView --

    UnInitialize the indicated object as a layout view.

    Preconditions:
        The object will be a valid layout view object.

    Postconditions:
        The layout view will no longer be a valid layout view object, and any
        side-effects of InitAsNetLView will be undone.  This procedure does
        not deallocate storage.
----------------------------------------------------------------------------*)

PROCEDURE UnInitAsNetLView(    NetLView : ANetLView);







(*----------------------------------------------------------------------------
    CloneNetLViewMethods --

    Make a copy of the layout view methods into the indicated method object.

    Preconditions:
        None.

    Postcondition:
        The layout view methods will be copied into the indicated method 
        object.
----------------------------------------------------------------------------*)

PROCEDURE CloneNetLViewMethods(    MethodObject : ANetLViewMethods);









(*----------------------------------------------------------------------------
    ValidateNetLView --

    Determine that the indicated object is in fact a valid layout view object.

    Preconditions:
        None.

    Postconditions:
        If the object is not a valid layout view object, FatalError will be
        called.
----------------------------------------------------------------------------*)

PROCEDURE ValidateNetLView(    NetLView : ANetLView);



END NetLViews.
